#!/usr/bin/env pwsh

# Script de Valida√ß√£o de Release para Registro MM

function Test-CodeQuality {
    Write-Host "üîç Verificando qualidade do c√≥digo..." -ForegroundColor Cyan
    cargo clippy -- -D warnings
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Falha na verifica√ß√£o de qualidade do c√≥digo"
        return $false
    }
    return $true
}

function Test-CodeFormat {
    Write-Host "üßπ Verificando formata√ß√£o do c√≥digo..." -ForegroundColor Cyan
    cargo fmt -- --check
    if ($LASTEXITCODE -ne 0) {
        Write-Error "C√≥digo n√£o formatado corretamente"
        return $false
    }
    return $true
}

function Run-UnitTests {
    Write-Host "üß™ Executando testes unit√°rios..." -ForegroundColor Cyan
    cargo test --lib
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Falha nos testes unit√°rios"
        return $false
    }
    return $true
}

function Run-IntegrationTests {
    Write-Host "üîó Executando testes de integra√ß√£o..." -ForegroundColor Cyan
    cargo test --test integration
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Falha nos testes de integra√ß√£o"
        return $false
    }
    return $true
}

function Run-LoadTests {
    Write-Host "‚ö° Executando testes de carga..." -ForegroundColor Cyan
    cargo bench
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Falha nos testes de carga"
        return $false
    }
    return $true
}

function Run-SecurityScan {
    Write-Host "üîí Realizando varredura de seguran√ßa..." -ForegroundColor Cyan
    cargo audit
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Vulnerabilidades de seguran√ßa encontradas"
        return $false
    }
    return $true
}

function Create-GitHubRelease {
    param(
        [string]$Version = "v1.0.0",
        [string]$Changelog = "CHANGELOG.md"
    )

    Write-Host "üè∑Ô∏è Criando tag de release no GitHub..." -ForegroundColor Cyan
    
    $changelogContent = Get-Content $Changelog -Raw
    
    gh release create $Version `
        --title "Registro MM $Version" `
        --notes "$changelogContent" `
        --draft
    
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Falha ao criar release no GitHub"
        return $false
    }
    return $true
}

function Main {
    $startTime = Get-Date

    $checks = @(
        @{Name="Qualidade do C√≥digo"; Func={Test-CodeQuality}},
        @{Name="Formata√ß√£o do C√≥digo"; Func={Test-CodeFormat}},
        @{Name="Testes Unit√°rios"; Func={Run-UnitTests}},
        @{Name="Testes de Integra√ß√£o"; Func={Run-IntegrationTests}},
        @{Name="Testes de Carga"; Func={Run-LoadTests}},
        @{Name="Varredura de Seguran√ßa"; Func={Run-SecurityScan}},
        @{Name="Cria√ß√£o de Release"; Func={Create-GitHubRelease}}
    )

    $failedChecks = @()

    foreach ($check in $checks) {
        Write-Host "`nüîç Executando: $($check.Name)" -ForegroundColor Green
        $result = & $check.Func
        if (-not $result) {
            $failedChecks += $check.Name
            Write-Host "‚ùå $($check.Name) - FALHOU" -ForegroundColor Red
        } else {
            Write-Host "‚úÖ $($check.Name) - SUCESSO" -ForegroundColor Green
        }
    }

    $endTime = Get-Date
    $duration = $endTime - $startTime

    if ($failedChecks.Count -eq 0) {
        Write-Host "`nüéâ Valida√ß√£o de Release Conclu√≠da com Sucesso!" -ForegroundColor Green
        Write-Host "Dura√ß√£o: $($duration.ToString())" -ForegroundColor Cyan
        return 0
    } else {
        Write-Host "`n‚ùå Valida√ß√£o de Release Falhou" -ForegroundColor Red
        Write-Host "Verifica√ß√µes com falha:" -ForegroundColor Yellow
        $failedChecks | ForEach-Object { Write-Host "- $_" -ForegroundColor Yellow }
        return 1
    }
}

# Executar script
Main
